import Head from 'next/head';
import { QueryClient, dehydrate } from 'react-query';
import { getPokemonChunk } from './api/pokemon';
import PageHeader from '@/components/organisms/PageHeader';
import PokemonList from '@/components/organisms/PokemonList';
import Container from '@/components/layouts/Container';
import { styled } from '@/stitches.config';
import SearchableContent from '@/components/organisms/SearchableContent';
import useInputStore from '@/store';
import SinglePokemon from '@/components/organisms/SinglePokemon';

const StyledMain = styled('main', {
    height: '100%',
});

export default function Home() {
    const inputText = useInputStore((state) => state.inputText);
    const changeText = useInputStore((state) => state.changeText);

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <StyledMain>
                <PageHeader title="Bannano Frontend Challenge" />
                <Container padding={1}>
                    <SearchableContent
                        placeholder="Type a PokÃ©mon name"
                        buttonText="Search"
                        onSubmit={changeText}
                        onClear={() => changeText('')}
                    >
                        {inputText ? (
                            <SinglePokemon name={inputText} />
                        ) : (
                            <PokemonList />
                        )}
                    </SearchableContent>
                </Container>
            </StyledMain>
        </>
    );
}

export async function getServerSideProps() {
    const queryClient = new QueryClient();
    await queryClient.prefetchInfiniteQuery({
        queryKey: ['pokemon'],
        queryFn: async () => getPokemonChunk(),
        initialData: {
            pages: [[]],
            pageParams: [0],
        },
    });

    return { props: { dehydratedState: dehydrate(queryClient) } };
}
